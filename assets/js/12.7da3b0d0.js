(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{272:function(_,p,i){"use strict";i.r(p);var v=i(38),a=Object(v.a)({},function(){var _=this,p=_.$createElement,i=_._self._c||p;return i("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[i("p",[_._v("时间：2019年，距离我决定做自动化测试开始已经经过整整10年。回看过去的10年，庆幸站在了自动化测试风起云涌变化的时代节点。因为2009年之前，基本TestRunner、QTP老一代的自动化测试工具一统江湖。\n之后selenium异军突起后。实际上没有了真正像样的自动化测试框架（参见下面 2018年的51Testing的测试调查）。而当前的市场上对于高端测试人员的要求中也多了，需要能够编写自动化测试框架等要求。（参见：测试开发工程师），而这个岗位也是由于大环境而催生。\n但是无论工具和框架如何变化，都没有拜托关键字驱动的思想层次。也就是说除了编程语言和驱动工具的不同外，都没有实质的超越过QTP的设计思想。甚至使用上可能QTP来得方便直接。")]),_._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-12a46b50ade66014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[_._v("就像下图，是上面调查报告中去年新增的工具squish在其网站上的一张宣传工具录制功能的图片，有1%的使用人员而且在2018年翻倍2%（当然不知道51testing这次参与调查人员有多少，想必应该不少）。")]),_._v(" "),i("p",[_._v("但是如果熟悉QTP的人应该知道，QTP的经典教程第一个例子，就是录制计算器并回访。想想看10继年前的工具的例子的影响是何其深远。不得不承认，计算器的例子对于不动自动化测试，或没有做过自动化测试人来说")]),_._v(" "),i("p",[_._v("确实极具吸引力。而录制功能的一切看起来都是那么的棒，以至于在QTP早期首页上就是 大大的“Start Recording”")]),_._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-422f382c15cfd21d.gif?imageMogr2/auto-orient/strip",alt:"website-animation-2.gif"}}),_._v(" "),i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-772f42f2e46c97cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[_._v("再来看新晋的另外一个工具ranorex ，其官网展示的可以看到界面除了支撑移动端（10年前没有移动端，python也不那么流行），录制按钮的位置界面的布局和QTP都极其相似。")]),_._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-e3acff7cc83a7810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[i("strong",[_._v("ranorex 官网界面截图")]),_._v(" "),i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-4ab8b840fdc01b71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[_._v("（ps：上面两个新工具一定有其优秀的地方，比如squish支撑BDD（行为驱动开发）模式的自动化测试，怎奈两个工具都是收费的，暂时没有尝试。）")]),_._v(" "),i("p",[_._v("以上，也说明目前的主流自动化测试还是以 关键字驱动为主。所以，本文主要从关键字驱动谈起。")]),_._v(" "),i("p",[_._v("在这之前，还要先来聊聊 关于 录制功能 这个事情。")]),_._v(" "),i("p",[_._v("在 QTP、seleium、这两个工具中，都提供了录制功能，而且录制功能。而且都是在入门篇的第一课要培训的内容。而最成功应用录制的案例可能只能算是，按键精灵的录制功能去刷 阿拉希副本。")]),_._v(" "),i("p",[_._v("（ps：阿拉希是魔兽世界早年的副本，那时候可以通过按键精灵录制一个简单的鼠标点击和键盘空格动作，来耍副本荣誉值）。")]),_._v(" "),i("p",[_._v("实际项目中，往往没有太大用途。")]),_._v(" "),i("p",[_._v("####主要问题：")]),_._v(" "),i("p",[_._v("1、录制后的脚本往往不能直接使用，还需要进行调试。而录制生成的脚本格式参数等各方面都需要调整，为了用例的可维护性，往往测试人员都会选择自己写。")]),_._v(" "),i("p",[_._v("2、脚本不能通过新的录制进行更改，应用不到用例维护的场景中。")]),_._v(" "),i("p",[_._v("3、录制的屏幕坐标和键盘行为，对于需要频繁反复执行的自动化测试脚本来说，就不够可靠了。比如：更换了新的屏幕（分辨率变化），难道要把脚本全部从新录制一遍？这些简单问题往往会将测试人员折磨疯掉。")]),_._v(" "),i("p",[_._v("所以录制功能，更恰当的说法是，用例编写的一种辅助工具，最大的作用的辅助定位元素，所以当功能有相同功能时，录制就显得不那么重要了。比如web 自动化时，使用的开发者工具，就可以很好地定位到页面元素。")]),_._v(" "),i("p",[i("strong",[_._v("补充一个问题：录制功能还有一个作用就是，让不会编码的测试人员尽快可有开始写自动化测试用例。")])]),_._v(" "),i("p",[_._v("其实，到2019年，如果一个测试人员不会写代码，已经是能不能生存的问题，而不是要不要做自动化测试的事。所以再考虑框架设计的时候，")]),_._v(" "),i("p",[_._v("对于不会编码的测试人员，如果要搞自动化测试的话，对不起请先去学习编程语言，起码要会python吧。")]),_._v(" "),i("p",[_._v("自动化测试框架设计时，确实要考虑如何提升用例编写效率，方法不止录制这一种，而目的绝不是让测试人员可以不具备编程技能。")]),_._v(" "),i("p",[_._v("很多将关键字做到极致的自动化测试框架，比如华为内部的AutoSpace，熟练使用人往往的一个感慨是好像写代码。")]),_._v(" "),i("p",[_._v("是的，自动化测试用例编写的最终的思想都是和编程相关的，你又如何能要求一个不动代码的人可以把自动化用例写好呢，无论你把工具做得如何的简单。")]),_._v(" "),i("p",[_._v("好，以上录制问题说到这，那对于自动化测试框架的设计意味着什么呢？")]),_._v(" "),i("p",[_._v("问题：是否需要 录制功能？")]),_._v(" "),i("p",[_._v("答案：不一定，录制不应该是核心功能，仅是用例编写辅助功能。假如对用例编写效率有提升那有意义，如果仅是录制一遍，后续用例又没有办法维护还需要修改就没有意义。（优先级：低）")]),_._v(" "),i("p",[_._v("####关于关键字驱动的自动化测试")]),_._v(" "),i("p",[_._v("关键字驱动本身，可以看做由面相对象的设计出发，将业务逻辑或单个动作编写成一些关键字。如：click、input 或者 “登录”。这种即可以封装单个动作，也可以封装一个统一的业务。")]),_._v(" "),i("p",[_._v("其与数据驱动组合是后来大多数测试框架成果的主要因素之一。")]),_._v(" "),i("p",[_._v("如：selenium 中 keyword 关键字 的设计 命令+对象+数据 的经典形式。\n"),i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-444ebb6eaa329dde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[_._v("一段表格的实例代码如下：")]),_._v(" "),i("p",[_._v("可以看到下面，是一段登录代码的实例。打开浏览器，输入用户名、输入密码、点击登录按钮、定位list_stocks元素，判断输入文字。一个自动化测试用例搞定。")]),_._v(" "),i("p",[_._v("一切看起来都是那么的美好。现在可能不会再有很对人看到这个感到兴奋，因为已经被无数的测试团队用血泪证实了，一切远没有那么美好，但如果时间倒回到2010年~2012年左右")]),_._v(" "),i("p",[_._v("那个时候看到这种，自动化方式时，确实有一种无比兴奋而准备大干一场的冲动，也正是那个时候，我确实有一个月的时间实践了一把。")]),_._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4526818-5391169d86742276.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),_._v(" "),i("p",[_._v("虽然验证这种方式是还不能最终帮我们达成做一个，成功的自动化测试项目。还是要先看看 通过excle 这种表格化的自动化测试脚本的编写方法，到底优势在哪里问题在哪里。")]),_._v(" "),i("p",[i("em",[i("strong",[_._v("优势：")])])]),_._v(" "),i("p",[_._v("1、简单又清晰的抽象和解耦了，自动化测试脚本的基本元素。明确的划分出，（行为、命令）、对象、数据。")]),_._v(" "),i("p",[_._v("2、明确的 命令+对象+数据，已经近似于 自然语言编写的测试用例。易于理解和阅读。")]),_._v(" "),i("p",[_._v("3、简单，简单很重要、表格真的很简单，简单意味着问题少于，调试的时候需要考虑的问题也少，效率就会高，所以再我之前设计的ski自动化测试框架中，坚决反对在表格中添加（Loop、for、if），当然有些keyword的框架，如华为的AutoSpace，提供了足够的功能。")]),_._v(" "),i("p",[_._v("这里简单说下，后面框架设计时候还会涉及这个思考。其实不增加这个功能的主要原因是，我一直找不到一个充分的理由。最典型的测试需要循环场景无非是，同一个页面要测试n组数据，")]),_._v(" "),i("p",[_._v("亦或是同一个接口需要发送上百次不同数据的请求，但是因为excel实在太方便，结合数据表，拖拽一下就可以了，而且还能修改其中一个数据用例时避免把其它99个情况再跑一便。")]),_._v(" "),i("p",[_._v("说白了，功能自动化测试的测试数据，测试的是一个有限集合。所以，简单有时候很重要。不简单的都需要更多更强大的底层功能支撑，比如刚刚说循环99次，每次从数据表中取一行数据，维护其中一行数据时的调试都是大麻烦，麻烦框架是否要提供一个支撑断点调试的功能？")]),_._v(" "),i("p",[i("em",[i("strong",[_._v("缺点：")])])]),_._v(" "),i("p",[_._v("说道关键字驱动的缺点，网上各自各样的说法有很多。其实我觉得大多数都不能算作 关键字驱动，就是一种基于测试行为的自动化测试用例的抽象方法，这里大多两个不再展开，后面会具体设计中解决：")]),_._v(" "),i("p",[_._v("1、可维护性差：测试用例不易于维护。可以说大多数的自动化测试失败都源于这个问题，用例不可维护。而主要不可维护实际上一个综合因素导致。如：业务抽象是否合理、数据设计是否合理、选择的工具是否兼容（后面再一个专题说）")]),_._v(" "),i("p",[_._v("2、表格编写调试困难：")])])},[],!1,null,null,null);p.default=a.exports}}]);